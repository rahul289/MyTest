import java.util.*; 
  
class BT{
        int data;
        BT left,right;
        public BT(int data)
        {
            this.data=data;
            this.left=null;
            this.right=null;
        }
        public void setLeft(BT left)
        {
            this.left=left;
        }
        public BT getLeft()
        {
            return left;
        }
        public void setRight(BT right)
        {
            this.right=right;
        }
        public BT getRight()
        {
            return right ;
        }
    }
// Driver Code 
public class Main { 
  
    public static void main(String args[]) 
    {
        BT tree=new BT(5);
		BT ltree=new BT(4); 
		BT rtree=new BT(6);
		tree.setLeft(ltree);
		tree.setRight(rtree);
	//	System.out.println("Tree data is "+tree.getLeft().data);
		ArrayList<BT> listOfBt= generateBT(1,3);
		System.out.println("Size of Binary Tree is "+listOfBt.size());
		System.out.println(listOfBt.get(0));
		System.out.println(listOfBt.get(1));
        System.out.println(listOfBt.get(2));
        System.out.println(listOfBt.get(3));
        System.out.println(listOfBt.get(4));
		int i=1;
		for(BT traverasl:listOfBt)
		{
		    System.out.println("The detail of tree:" +i);
		    LevelOrderTraversal(traverasl);
		   // InOrderTraversal(traverasl);
		    i++;
		    System.out.println();

		}
    } 
    public static void LevelOrderTraversal(BT root)
    {
        
    }
    public static void InOrderTraversal(BT root)
    {
        if(root!=null)
        {
            InOrderTraversal(root.getLeft());
            System.out.print(root.data+" ");
            InOrderTraversal(root.getRight());
        }
    }
    public static ArrayList<BT> generateBT(int start,int end)
    {
        System.out.println("Start is "+start+" and end is "+end);
        ArrayList<BT> subTree= new ArrayList<BT>();
        if(start>end)
        {
            System.out.println(start+","+end+"-0");
            subTree.add(null);
            return subTree;
        }
        for(int i=start;i<=end;i++)
        {
            for(BT left:generateBT(start,i-1))
                {
                    for(BT right:generateBT(i+1,end))
                        {
                            BT aT=new BT(i);
                            aT.setLeft(left);
                            aT.setRight(right);
                            subTree.add(aT);
                        }
                }
        }
   //     System.out.println("The value of start is "+start);
    //    System.out.println("The value of end is "+end);
        System.out.println(start+","+end+"-"+subTree.size());
        for(int i=0;i<subTree.size();i++)
        {
             System.out.println((i+1)+"th tree");
            InOrderTraversal(subTree.get(i));
             System.out.println();
           
        }
       
        return subTree;
    }
    
    
} 
